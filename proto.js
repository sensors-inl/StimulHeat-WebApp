// source: Protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck


goog.provide('proto.Ack');
goog.provide('proto.Command');
goog.provide('proto.Command.CommandInstructionCase');
goog.provide('proto.CommandIntensity');
goog.provide('proto.EnslavementType');
goog.provide('proto.GetMeasureParametersList');
goog.provide('proto.MeasureParametersList');
goog.provide('proto.MeasurementsResults');
goog.provide('proto.PIDParameters');
goog.provide('proto.Protocol');
goog.provide('proto.Protocol.TypeCase');
goog.provide('proto.Request');
goog.provide('proto.Request.TypeCase');
goog.provide('proto.Response');
goog.provide('proto.Response.TypeCase');
goog.provide('proto.SetMeasureParametersList');
goog.provide('proto.Stream');
goog.provide('proto.Stream.DataCase');
goog.provide('proto.TEDParameters');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Command.oneofGroups_);
};
goog.inherits(proto.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Command.displayName = 'proto.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TEDParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TEDParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TEDParameters.displayName = 'proto.TEDParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PIDParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PIDParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PIDParameters.displayName = 'proto.PIDParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MeasurementsResults = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MeasurementsResults, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MeasurementsResults.displayName = 'proto.MeasurementsResults';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MeasureParametersList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MeasureParametersList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MeasureParametersList.displayName = 'proto.MeasureParametersList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetMeasureParametersList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetMeasureParametersList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SetMeasureParametersList.displayName = 'proto.SetMeasureParametersList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetMeasureParametersList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetMeasureParametersList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetMeasureParametersList.displayName = 'proto.GetMeasureParametersList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Ack.displayName = 'proto.Ack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Request.oneofGroups_);
};
goog.inherits(proto.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Request.displayName = 'proto.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Response.oneofGroups_);
};
goog.inherits(proto.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Response.displayName = 'proto.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Stream.oneofGroups_);
};
goog.inherits(proto.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Stream.displayName = 'proto.Stream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Protocol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Protocol.oneofGroups_);
};
goog.inherits(proto.Protocol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Protocol.displayName = 'proto.Protocol';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Command.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Command.CommandInstructionCase = {
  COMMAND_INSTRUCTION_NOT_SET: 0,
  COMMANDINTENSITY: 1,
  COMMANDVALUE: 2
};

/**
 * @return {proto.Command.CommandInstructionCase}
 */
proto.Command.prototype.getCommandInstructionCase = function() {
  return /** @type {proto.Command.CommandInstructionCase} */(jspb.Message.computeOneofCase(this, proto.Command.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandintensity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commandvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Command}
 */
proto.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Command;
  return proto.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Command}
 */
proto.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.CommandIntensity} */ (reader.readEnum());
      msg.setCommandintensity(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCommandvalue(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.CommandIntensity} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional CommandIntensity commandIntensity = 1;
 * @return {!proto.CommandIntensity}
 */
proto.Command.prototype.getCommandintensity = function() {
  return /** @type {!proto.CommandIntensity} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.CommandIntensity} value
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.setCommandintensity = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.Command.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearCommandintensity = function() {
  return jspb.Message.setOneofField(this, 1, proto.Command.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasCommandintensity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float commandValue = 2;
 * @return {number}
 */
proto.Command.prototype.getCommandvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.setCommandvalue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.Command.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.clearCommandvalue = function() {
  return jspb.Message.setOneofField(this, 2, proto.Command.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Command.prototype.hasCommandvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool enabled = 3;
 * @return {boolean}
 */
proto.Command.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TEDParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.TEDParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TEDParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TEDParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    am: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    rm: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    tm: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TEDParameters}
 */
proto.TEDParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TEDParameters;
  return proto.TEDParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TEDParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TEDParameters}
 */
proto.TEDParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAm(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TEDParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TEDParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TEDParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TEDParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAm();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getRm();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getTm();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float am = 1;
 * @return {number}
 */
proto.TEDParameters.prototype.getAm = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TEDParameters} returns this
 */
proto.TEDParameters.prototype.setAm = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float rm = 2;
 * @return {number}
 */
proto.TEDParameters.prototype.getRm = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TEDParameters} returns this
 */
proto.TEDParameters.prototype.setRm = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float tm = 3;
 * @return {number}
 */
proto.TEDParameters.prototype.getTm = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.TEDParameters} returns this
 */
proto.TEDParameters.prototype.setTm = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PIDParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.PIDParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PIDParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PIDParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    kp: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    ki: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    kd: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    dt: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PIDParameters}
 */
proto.PIDParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PIDParameters;
  return proto.PIDParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PIDParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PIDParameters}
 */
proto.PIDParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKi(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKd(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PIDParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PIDParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PIDParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PIDParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKp();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getKi();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getKd();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDt();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float kp = 1;
 * @return {number}
 */
proto.PIDParameters.prototype.getKp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PIDParameters} returns this
 */
proto.PIDParameters.prototype.setKp = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float ki = 2;
 * @return {number}
 */
proto.PIDParameters.prototype.getKi = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PIDParameters} returns this
 */
proto.PIDParameters.prototype.setKi = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float kd = 3;
 * @return {number}
 */
proto.PIDParameters.prototype.getKd = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PIDParameters} returns this
 */
proto.PIDParameters.prototype.setKd = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float dt = 4;
 * @return {number}
 */
proto.PIDParameters.prototype.getDt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.PIDParameters} returns this
 */
proto.PIDParameters.prototype.setDt = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MeasurementsResults.prototype.toObject = function(opt_includeInstance) {
  return proto.MeasurementsResults.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MeasurementsResults} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MeasurementsResults.toObject = function(includeInstance, msg) {
  var f, obj = {
    temp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    heat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    setvaluetemp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    setvalueheat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tempin: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tempout: jspb.Message.getFieldWithDefault(msg, 6, 0),
    temprefamb: jspb.Message.getFieldWithDefault(msg, 7, 0),
    temprefskin: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MeasurementsResults}
 */
proto.MeasurementsResults.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MeasurementsResults;
  return proto.MeasurementsResults.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MeasurementsResults} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MeasurementsResults}
 */
proto.MeasurementsResults.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeat(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSetvaluetemp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSetvalueheat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTempin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTempout(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemprefamb(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemprefskin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MeasurementsResults.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MeasurementsResults.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MeasurementsResults} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MeasurementsResults.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemp();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeat();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSetvaluetemp();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSetvalueheat();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTempin();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTempout();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTemprefamb();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getTemprefskin();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 temp = 1;
 * @return {number}
 */
proto.MeasurementsResults.prototype.getTemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MeasurementsResults} returns this
 */
proto.MeasurementsResults.prototype.setTemp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 heat = 2;
 * @return {number}
 */
proto.MeasurementsResults.prototype.getHeat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.MeasurementsResults} returns this
 */
proto.MeasurementsResults.prototype.setHeat = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 setValueTemp = 3;
 * @return {number}
 */
proto.MeasurementsResults.prototype.getSetvaluetemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.MeasurementsResults} returns this
 */
proto.MeasurementsResults.prototype.setSetvaluetemp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 setValueHeat = 4;
 * @return {number}
 */
proto.MeasurementsResults.prototype.getSetvalueheat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MeasurementsResults} returns this
 */
proto.MeasurementsResults.prototype.setSetvalueheat = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 tempIn = 5;
 * @return {number}
 */
proto.MeasurementsResults.prototype.getTempin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.MeasurementsResults} returns this
 */
proto.MeasurementsResults.prototype.setTempin = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 tempOut = 6;
 * @return {number}
 */
proto.MeasurementsResults.prototype.getTempout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MeasurementsResults} returns this
 */
proto.MeasurementsResults.prototype.setTempout = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 tempRefAmb = 7;
 * @return {number}
 */
proto.MeasurementsResults.prototype.getTemprefamb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.MeasurementsResults} returns this
 */
proto.MeasurementsResults.prototype.setTemprefamb = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 tempRefSkin = 8;
 * @return {number}
 */
proto.MeasurementsResults.prototype.getTemprefskin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.MeasurementsResults} returns this
 */
proto.MeasurementsResults.prototype.setTemprefskin = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MeasureParametersList.prototype.toObject = function(opt_includeInstance) {
  return proto.MeasureParametersList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MeasureParametersList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MeasureParametersList.toObject = function(includeInstance, msg) {
  var f, obj = {
    enslavementtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tedparameters: (f = msg.getTedparameters()) && proto.TEDParameters.toObject(includeInstance, f),
    pidparameters: (f = msg.getPidparameters()) && proto.PIDParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MeasureParametersList}
 */
proto.MeasureParametersList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MeasureParametersList;
  return proto.MeasureParametersList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MeasureParametersList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MeasureParametersList}
 */
proto.MeasureParametersList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.EnslavementType} */ (reader.readEnum());
      msg.setEnslavementtype(value);
      break;
    case 2:
      var value = new proto.TEDParameters;
      reader.readMessage(value,proto.TEDParameters.deserializeBinaryFromReader);
      msg.setTedparameters(value);
      break;
    case 3:
      var value = new proto.PIDParameters;
      reader.readMessage(value,proto.PIDParameters.deserializeBinaryFromReader);
      msg.setPidparameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MeasureParametersList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MeasureParametersList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MeasureParametersList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MeasureParametersList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnslavementtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTedparameters();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TEDParameters.serializeBinaryToWriter
    );
  }
  f = message.getPidparameters();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.PIDParameters.serializeBinaryToWriter
    );
  }
};


/**
 * optional EnslavementType enslavementType = 1;
 * @return {!proto.EnslavementType}
 */
proto.MeasureParametersList.prototype.getEnslavementtype = function() {
  return /** @type {!proto.EnslavementType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.EnslavementType} value
 * @return {!proto.MeasureParametersList} returns this
 */
proto.MeasureParametersList.prototype.setEnslavementtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TEDParameters tedParameters = 2;
 * @return {?proto.TEDParameters}
 */
proto.MeasureParametersList.prototype.getTedparameters = function() {
  return /** @type{?proto.TEDParameters} */ (
    jspb.Message.getWrapperField(this, proto.TEDParameters, 2));
};


/**
 * @param {?proto.TEDParameters|undefined} value
 * @return {!proto.MeasureParametersList} returns this
*/
proto.MeasureParametersList.prototype.setTedparameters = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MeasureParametersList} returns this
 */
proto.MeasureParametersList.prototype.clearTedparameters = function() {
  return this.setTedparameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MeasureParametersList.prototype.hasTedparameters = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PIDParameters pidParameters = 3;
 * @return {?proto.PIDParameters}
 */
proto.MeasureParametersList.prototype.getPidparameters = function() {
  return /** @type{?proto.PIDParameters} */ (
    jspb.Message.getWrapperField(this, proto.PIDParameters, 3));
};


/**
 * @param {?proto.PIDParameters|undefined} value
 * @return {!proto.MeasureParametersList} returns this
*/
proto.MeasureParametersList.prototype.setPidparameters = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MeasureParametersList} returns this
 */
proto.MeasureParametersList.prototype.clearPidparameters = function() {
  return this.setPidparameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MeasureParametersList.prototype.hasPidparameters = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetMeasureParametersList.prototype.toObject = function(opt_includeInstance) {
  return proto.SetMeasureParametersList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetMeasureParametersList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetMeasureParametersList.toObject = function(includeInstance, msg) {
  var f, obj = {
    measureparameterslist: (f = msg.getMeasureparameterslist()) && proto.MeasureParametersList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetMeasureParametersList}
 */
proto.SetMeasureParametersList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetMeasureParametersList;
  return proto.SetMeasureParametersList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetMeasureParametersList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetMeasureParametersList}
 */
proto.SetMeasureParametersList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MeasureParametersList;
      reader.readMessage(value,proto.MeasureParametersList.deserializeBinaryFromReader);
      msg.setMeasureparameterslist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetMeasureParametersList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetMeasureParametersList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetMeasureParametersList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetMeasureParametersList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeasureparameterslist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MeasureParametersList.serializeBinaryToWriter
    );
  }
};


/**
 * optional MeasureParametersList measureParametersList = 1;
 * @return {?proto.MeasureParametersList}
 */
proto.SetMeasureParametersList.prototype.getMeasureparameterslist = function() {
  return /** @type{?proto.MeasureParametersList} */ (
    jspb.Message.getWrapperField(this, proto.MeasureParametersList, 1));
};


/**
 * @param {?proto.MeasureParametersList|undefined} value
 * @return {!proto.SetMeasureParametersList} returns this
*/
proto.SetMeasureParametersList.prototype.setMeasureparameterslist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SetMeasureParametersList} returns this
 */
proto.SetMeasureParametersList.prototype.clearMeasureparameterslist = function() {
  return this.setMeasureparameterslist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SetMeasureParametersList.prototype.hasMeasureparameterslist = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetMeasureParametersList.prototype.toObject = function(opt_includeInstance) {
  return proto.GetMeasureParametersList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetMeasureParametersList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetMeasureParametersList.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetMeasureParametersList}
 */
proto.GetMeasureParametersList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetMeasureParametersList;
  return proto.GetMeasureParametersList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetMeasureParametersList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetMeasureParametersList}
 */
proto.GetMeasureParametersList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetMeasureParametersList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetMeasureParametersList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetMeasureParametersList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetMeasureParametersList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ack}
 */
proto.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ack;
  return proto.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ack}
 */
proto.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Request.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Request.TypeCase = {
  TYPE_NOT_SET: 0,
  SETMEASUREPARAMETERSLIST: 1,
  GETMEASUREPARAMETERSLIST: 2,
  COMMAND: 3
};

/**
 * @return {proto.Request.TypeCase}
 */
proto.Request.prototype.getTypeCase = function() {
  return /** @type {proto.Request.TypeCase} */(jspb.Message.computeOneofCase(this, proto.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    setmeasureparameterslist: (f = msg.getSetmeasureparameterslist()) && proto.SetMeasureParametersList.toObject(includeInstance, f),
    getmeasureparameterslist: (f = msg.getGetmeasureparameterslist()) && proto.GetMeasureParametersList.toObject(includeInstance, f),
    command: (f = msg.getCommand()) && proto.Command.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Request;
  return proto.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SetMeasureParametersList;
      reader.readMessage(value,proto.SetMeasureParametersList.deserializeBinaryFromReader);
      msg.setSetmeasureparameterslist(value);
      break;
    case 2:
      var value = new proto.GetMeasureParametersList;
      reader.readMessage(value,proto.GetMeasureParametersList.deserializeBinaryFromReader);
      msg.setGetmeasureparameterslist(value);
      break;
    case 3:
      var value = new proto.Command;
      reader.readMessage(value,proto.Command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetmeasureparameterslist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SetMeasureParametersList.serializeBinaryToWriter
    );
  }
  f = message.getGetmeasureparameterslist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GetMeasureParametersList.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Command.serializeBinaryToWriter
    );
  }
};


/**
 * optional SetMeasureParametersList setMeasureParametersList = 1;
 * @return {?proto.SetMeasureParametersList}
 */
proto.Request.prototype.getSetmeasureparameterslist = function() {
  return /** @type{?proto.SetMeasureParametersList} */ (
    jspb.Message.getWrapperField(this, proto.SetMeasureParametersList, 1));
};


/**
 * @param {?proto.SetMeasureParametersList|undefined} value
 * @return {!proto.Request} returns this
*/
proto.Request.prototype.setSetmeasureparameterslist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.clearSetmeasureparameterslist = function() {
  return this.setSetmeasureparameterslist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Request.prototype.hasSetmeasureparameterslist = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GetMeasureParametersList getMeasureParametersList = 2;
 * @return {?proto.GetMeasureParametersList}
 */
proto.Request.prototype.getGetmeasureparameterslist = function() {
  return /** @type{?proto.GetMeasureParametersList} */ (
    jspb.Message.getWrapperField(this, proto.GetMeasureParametersList, 2));
};


/**
 * @param {?proto.GetMeasureParametersList|undefined} value
 * @return {!proto.Request} returns this
*/
proto.Request.prototype.setGetmeasureparameterslist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.clearGetmeasureparameterslist = function() {
  return this.setGetmeasureparameterslist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Request.prototype.hasGetmeasureparameterslist = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Command command = 3;
 * @return {?proto.Command}
 */
proto.Request.prototype.getCommand = function() {
  return /** @type{?proto.Command} */ (
    jspb.Message.getWrapperField(this, proto.Command, 3));
};


/**
 * @param {?proto.Command|undefined} value
 * @return {!proto.Request} returns this
*/
proto.Request.prototype.setCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Request.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Response.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Response.TypeCase = {
  TYPE_NOT_SET: 0,
  ACK: 1,
  MEASUREPARAMETERSLIST: 2
};

/**
 * @return {proto.Response.TypeCase}
 */
proto.Response.prototype.getTypeCase = function() {
  return /** @type {proto.Response.TypeCase} */(jspb.Message.computeOneofCase(this, proto.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: (f = msg.getAck()) && proto.Ack.toObject(includeInstance, f),
    measureparameterslist: (f = msg.getMeasureparameterslist()) && proto.MeasureParametersList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Response;
  return proto.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Response}
 */
proto.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Ack;
      reader.readMessage(value,proto.Ack.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 2:
      var value = new proto.MeasureParametersList;
      reader.readMessage(value,proto.MeasureParametersList.deserializeBinaryFromReader);
      msg.setMeasureparameterslist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Ack.serializeBinaryToWriter
    );
  }
  f = message.getMeasureparameterslist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MeasureParametersList.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ack ack = 1;
 * @return {?proto.Ack}
 */
proto.Response.prototype.getAck = function() {
  return /** @type{?proto.Ack} */ (
    jspb.Message.getWrapperField(this, proto.Ack, 1));
};


/**
 * @param {?proto.Ack|undefined} value
 * @return {!proto.Response} returns this
*/
proto.Response.prototype.setAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Response.prototype.hasAck = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MeasureParametersList measureParametersList = 2;
 * @return {?proto.MeasureParametersList}
 */
proto.Response.prototype.getMeasureparameterslist = function() {
  return /** @type{?proto.MeasureParametersList} */ (
    jspb.Message.getWrapperField(this, proto.MeasureParametersList, 2));
};


/**
 * @param {?proto.MeasureParametersList|undefined} value
 * @return {!proto.Response} returns this
*/
proto.Response.prototype.setMeasureparameterslist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Response} returns this
 */
proto.Response.prototype.clearMeasureparameterslist = function() {
  return this.setMeasureparameterslist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Response.prototype.hasMeasureparameterslist = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Stream.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.Stream.DataCase = {
  DATA_NOT_SET: 0,
  MEASUREMENTSRESULTS: 1
};

/**
 * @return {proto.Stream.DataCase}
 */
proto.Stream.prototype.getDataCase = function() {
  return /** @type {proto.Stream.DataCase} */(jspb.Message.computeOneofCase(this, proto.Stream.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    measurementsresults: (f = msg.getMeasurementsresults()) && proto.MeasurementsResults.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Stream}
 */
proto.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Stream;
  return proto.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Stream}
 */
proto.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MeasurementsResults;
      reader.readMessage(value,proto.MeasurementsResults.deserializeBinaryFromReader);
      msg.setMeasurementsresults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeasurementsresults();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MeasurementsResults.serializeBinaryToWriter
    );
  }
};


/**
 * optional MeasurementsResults measurementsResults = 1;
 * @return {?proto.MeasurementsResults}
 */
proto.Stream.prototype.getMeasurementsresults = function() {
  return /** @type{?proto.MeasurementsResults} */ (
    jspb.Message.getWrapperField(this, proto.MeasurementsResults, 1));
};


/**
 * @param {?proto.MeasurementsResults|undefined} value
 * @return {!proto.Stream} returns this
*/
proto.Stream.prototype.setMeasurementsresults = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Stream.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Stream} returns this
 */
proto.Stream.prototype.clearMeasurementsresults = function() {
  return this.setMeasurementsresults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Stream.prototype.hasMeasurementsresults = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Protocol.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.Protocol.TypeCase = {
  TYPE_NOT_SET: 0,
  REQUEST: 1,
  RESPONSE: 2,
  STREAM: 3
};

/**
 * @return {proto.Protocol.TypeCase}
 */
proto.Protocol.prototype.getTypeCase = function() {
  return /** @type {proto.Protocol.TypeCase} */(jspb.Message.computeOneofCase(this, proto.Protocol.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Protocol.prototype.toObject = function(opt_includeInstance) {
  return proto.Protocol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Protocol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.Response.toObject(includeInstance, f),
    stream: (f = msg.getStream()) && proto.Stream.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Protocol}
 */
proto.Protocol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Protocol;
  return proto.Protocol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Protocol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Protocol}
 */
proto.Protocol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Request;
      reader.readMessage(value,proto.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.Response;
      reader.readMessage(value,proto.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 3:
      var value = new proto.Stream;
      reader.readMessage(value,proto.Stream.deserializeBinaryFromReader);
      msg.setStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Protocol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Protocol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Protocol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Protocol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Response.serializeBinaryToWriter
    );
  }
  f = message.getStream();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Stream.serializeBinaryToWriter
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.Request}
 */
proto.Protocol.prototype.getRequest = function() {
  return /** @type{?proto.Request} */ (
    jspb.Message.getWrapperField(this, proto.Request, 1));
};


/**
 * @param {?proto.Request|undefined} value
 * @return {!proto.Protocol} returns this
*/
proto.Protocol.prototype.setRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Protocol.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol} returns this
 */
proto.Protocol.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Response response = 2;
 * @return {?proto.Response}
 */
proto.Protocol.prototype.getResponse = function() {
  return /** @type{?proto.Response} */ (
    jspb.Message.getWrapperField(this, proto.Response, 2));
};


/**
 * @param {?proto.Response|undefined} value
 * @return {!proto.Protocol} returns this
*/
proto.Protocol.prototype.setResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Protocol.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol} returns this
 */
proto.Protocol.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Stream stream = 3;
 * @return {?proto.Stream}
 */
proto.Protocol.prototype.getStream = function() {
  return /** @type{?proto.Stream} */ (
    jspb.Message.getWrapperField(this, proto.Stream, 3));
};


/**
 * @param {?proto.Stream|undefined} value
 * @return {!proto.Protocol} returns this
*/
proto.Protocol.prototype.setStream = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Protocol.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Protocol} returns this
 */
proto.Protocol.prototype.clearStream = function() {
  return this.setStream(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Protocol.prototype.hasStream = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.EnslavementType = {
  HEAT: 0,
  TEMP: 1
};

/**
 * @enum {number}
 */
proto.CommandIntensity = {
  VERY_HOT: 0,
  HOT: 1,
  NEUTRAL: 2,
  COLD: 3,
  VERY_COLD: 4
};

